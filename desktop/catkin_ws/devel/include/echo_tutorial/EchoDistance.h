// Generated by gencpp from file echo_tutorial/EchoDistance.msg
// DO NOT EDIT!


#ifndef ECHO_TUTORIAL_MESSAGE_ECHODISTANCE_H
#define ECHO_TUTORIAL_MESSAGE_ECHODISTANCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace echo_tutorial
{
template <class ContainerAllocator>
struct EchoDistance_
{
  typedef EchoDistance_<ContainerAllocator> Type;

  EchoDistance_()
    : Stamp()
    , Distance(0.0)  {
    }
  EchoDistance_(const ContainerAllocator& _alloc)
    : Stamp()
    , Distance(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _Stamp_type;
  _Stamp_type Stamp;

   typedef double _Distance_type;
  _Distance_type Distance;





  typedef boost::shared_ptr< ::echo_tutorial::EchoDistance_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::echo_tutorial::EchoDistance_<ContainerAllocator> const> ConstPtr;

}; // struct EchoDistance_

typedef ::echo_tutorial::EchoDistance_<std::allocator<void> > EchoDistance;

typedef boost::shared_ptr< ::echo_tutorial::EchoDistance > EchoDistancePtr;
typedef boost::shared_ptr< ::echo_tutorial::EchoDistance const> EchoDistanceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::echo_tutorial::EchoDistance_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::echo_tutorial::EchoDistance_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::echo_tutorial::EchoDistance_<ContainerAllocator1> & lhs, const ::echo_tutorial::EchoDistance_<ContainerAllocator2> & rhs)
{
  return lhs.Stamp == rhs.Stamp &&
    lhs.Distance == rhs.Distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::echo_tutorial::EchoDistance_<ContainerAllocator1> & lhs, const ::echo_tutorial::EchoDistance_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace echo_tutorial

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::echo_tutorial::EchoDistance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::echo_tutorial::EchoDistance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::echo_tutorial::EchoDistance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::echo_tutorial::EchoDistance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::echo_tutorial::EchoDistance_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::echo_tutorial::EchoDistance_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::echo_tutorial::EchoDistance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7755fc5d2735bcfbf5a864c13aab9ab";
  }

  static const char* value(const ::echo_tutorial::EchoDistance_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7755fc5d2735bcfULL;
  static const uint64_t static_value2 = 0xbf5a864c13aab9abULL;
};

template<class ContainerAllocator>
struct DataType< ::echo_tutorial::EchoDistance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "echo_tutorial/EchoDistance";
  }

  static const char* value(const ::echo_tutorial::EchoDistance_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::echo_tutorial::EchoDistance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time Stamp\n"
"float64 Distance\n"
;
  }

  static const char* value(const ::echo_tutorial::EchoDistance_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::echo_tutorial::EchoDistance_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Stamp);
      stream.next(m.Distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EchoDistance_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::echo_tutorial::EchoDistance_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::echo_tutorial::EchoDistance_<ContainerAllocator>& v)
  {
    s << indent << "Stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.Stamp);
    s << indent << "Distance: ";
    Printer<double>::stream(s, indent + "  ", v.Distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ECHO_TUTORIAL_MESSAGE_ECHODISTANCE_H
