// Generated by gencpp from file led_tutorial/SetRGBAnalogRequest.msg
// DO NOT EDIT!


#ifndef LED_TUTORIAL_MESSAGE_SETRGBANALOGREQUEST_H
#define LED_TUTORIAL_MESSAGE_SETRGBANALOGREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace led_tutorial
{
template <class ContainerAllocator>
struct SetRGBAnalogRequest_
{
  typedef SetRGBAnalogRequest_<ContainerAllocator> Type;

  SetRGBAnalogRequest_()
    : R(0)
    , G(0)
    , B(0)  {
    }
  SetRGBAnalogRequest_(const ContainerAllocator& _alloc)
    : R(0)
    , G(0)
    , B(0)  {
  (void)_alloc;
    }



   typedef uint8_t _R_type;
  _R_type R;

   typedef uint8_t _G_type;
  _G_type G;

   typedef uint8_t _B_type;
  _B_type B;





  typedef boost::shared_ptr< ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetRGBAnalogRequest_

typedef ::led_tutorial::SetRGBAnalogRequest_<std::allocator<void> > SetRGBAnalogRequest;

typedef boost::shared_ptr< ::led_tutorial::SetRGBAnalogRequest > SetRGBAnalogRequestPtr;
typedef boost::shared_ptr< ::led_tutorial::SetRGBAnalogRequest const> SetRGBAnalogRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator1> & lhs, const ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator2> & rhs)
{
  return lhs.R == rhs.R &&
    lhs.G == rhs.G &&
    lhs.B == rhs.B;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator1> & lhs, const ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace led_tutorial

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "25e8e0a5fcebfd5489b6ec59d3303e32";
  }

  static const char* value(const ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x25e8e0a5fcebfd54ULL;
  static const uint64_t static_value2 = 0x89b6ec59d3303e32ULL;
};

template<class ContainerAllocator>
struct DataType< ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "led_tutorial/SetRGBAnalogRequest";
  }

  static const char* value(const ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 R\n"
"uint8 G\n"
"uint8 B\n"
;
  }

  static const char* value(const ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.R);
      stream.next(m.G);
      stream.next(m.B);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetRGBAnalogRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::led_tutorial::SetRGBAnalogRequest_<ContainerAllocator>& v)
  {
    s << indent << "R: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.R);
    s << indent << "G: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.G);
    s << indent << "B: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.B);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LED_TUTORIAL_MESSAGE_SETRGBANALOGREQUEST_H
